#!/usr/bin/env node
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@rollup/plugin-babel"),t=require("@rollup/plugin-commonjs"),r=require("@rollup/plugin-inject"),l=require("@rollup/plugin-node-resolve"),n=require("@rollup/plugin-typescript"),o=require("chalk"),a=require("chokidar"),i=require("commander"),s=require("fs"),u=require("open"),d=require("path"),c=require("rollup"),p=require("rollup-plugin-minify-html-literals"),f=require("rollup-plugin-postcss"),g=require("rollup-plugin-progress"),m=require("rollup-plugin-terser"),y=require("express"),b=require("express-ws");function x(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var j=x(t),h=x(r),v=x(l),S=x(n),w=x(o),_=x(a),$=x(s),q=x(u),E=x(d),R=x(p),D=x(f),F=x(g),L=x(y),T=x(b);const H=(e,t,r=[new RegExp("</body>","i"),new RegExp("</svg>"),new RegExp("</head>","i")])=>{let l=null;for(const t of r){const r=t.exec(e);if(r){l=r[0];break}}return l?e.replace(new RegExp(l,"i"),`${t}\n${l}`):e},N=e=>{e=E.default.resolve(e);const t=L.default(),r=T.default(t),l=s.readFileSync(E.default.join(__dirname,"injected.min.js")).toString(),n=r=>{const o=s.readdirSync(r);for(const a of o){const o=E.default.join(r,a);if(s.statSync(o).isDirectory())n(o);else{if(".html"!==E.default.extname(o))continue;const r=s.readFileSync(o).toString(),n=E.default.parse(E.default.relative(e,o));t.get(E.default.join("/",n.dir,"index"===n.name?"":n.name),((e,t)=>{t.send(H(r,`\n          \x3c!-- code injected by leafjs --\x3e\n          <script>\n              ${l}\n          <\/script>`))}))}}};t.use("/",L.default.static(e,{index:!1})),n(e);let o=null;return r.app.ws("/socket",(e=>{o=e})),{start:t.listen,update:()=>{null==o||o.send(JSON.stringify({msg:"reload"}))},error:e=>{null==o||o.send(JSON.stringify({msg:"error",data:e}))},on:r.app.on}},O=new i.Command,C=e=>{console.log(`${w.default.cyan("[leafjs]")} - ${w.default.blue("info")} - ${e}`)},M=e=>{console.log(`${w.default.cyan("[leafjs]")} - ${w.default.red("error")} - ${e}`)},k=e=>{console.log(`${w.default.cyan("[leafjs]")} - ${w.default.yellow("warn")} - ${e}`)},I=async t=>{let r=["js","jsx"];t.typescript&&(r=[...r,"ts","tsx"]);const l={presets:[["@babel/preset-env",{modules:!1,targets:"> 0.25%, not dead"}]],plugins:[["@babel/plugin-transform-react-jsx",{pragma:"___leaf_create_element_react"}]],babelHelpers:"bundled",extensions:r};let n=null,o=!1,a=null;for(const r of t.formats){C(`transpiling to format ${r.format}...`);const i={input:t.entry,plugins:[R.default(),D.default(),t.typescript?S.default({tsconfig:t.typescript}):null,e.babel(l),v.default(),j.default(),h.default({___leaf_create_element_react:["@leaf-web/core","createElementReactStyle"]}),m.terser({compress:{passes:5}}),F.default()],external:r.external},s="bundle.min.js",u={format:r.format,file:E.default.join(t.outputDir,r.path,s)};try{n=await c.rollup(i),await n.write(u)}catch(e){o=!0,M(`failed to compile.\n${w.default.gray(e)}`)}n&&await n.close(),o&&process.exit(1),"iife"===r.format&&(a=`${r.path}/bundle.min.js`)}return a},J=e=>{var t,r,l,n,o,a;const i=e.formats||["iife"],s=[];for(const e of i)"string"!=typeof e?s.push({format:null!==(t=e.format)&&void 0!==t?t:"iife",external:null!==(r=e.external)&&void 0!==r?r:[],path:null!==(l=e.path)&&void 0!==l?l:e.format}):s.push({format:e,external:[],path:e});return{entry:null!==(n=e.entry)&&void 0!==n?n:"./src/index.jsx",outputDir:null!==(o=e.outputDir)&&void 0!==o?o:"./dist",entryHTML:null!==(a=e.entryHTML)&&void 0!==a?a:"index.html",typescript:e.typescript||void 0,formats:s}},P=async e=>{const t=J(JSON.parse($.default.readFileSync(e).toString())),r=$.default.existsSync(t.entryHTML),l=r?$.default.readFileSync(t.entryHTML).toString():"",n=await I(t);r&&$.default.writeFileSync(E.default.join(t.outputDir,"index.html"),H(l,`<script src='${n}'><\/script>`,[new RegExp("</head>","i"),new RegExp("</body>","i")]))},U=(t,r)=>{$.default.existsSync("./.leaf")||$.default.mkdirSync("./.leaf");const l=J(JSON.parse($.default.readFileSync(t).toString())),n="js/bundle.js",o=$.default.existsSync(l.entryHTML),a=o?$.default.readFileSync(l.entryHTML).toString():"";(l.formats.length>2||"iife"!==l.formats[0].format)&&k("You are bundling in development mode. ALL format options will be ignored and only IIFE bundle will be generated. Use `leaf build` to generate bundles you specified."),o&&$.default.writeFileSync(E.default.join("./.leaf","index.html"),H(a,"<script src='js/bundle.js'><\/script>",[new RegExp("</head>","i"),new RegExp("</body>","i")]));let i=["js","jsx"];l.typescript&&(i=[...i,"ts","tsx"]);const s={presets:[["@babel/preset-env",{modules:!1,targets:"> 0.25%, not dead"}]],plugins:[["@babel/plugin-transform-react-jsx",{pragma:"___leaf_create_element_react"}]],babelHelpers:"bundled",extensions:i},u=[{...{input:l.entry,plugins:[l.typescript?S.default({tsconfig:l.typescript}):null,D.default(),v.default(),j.default(),e.babel(s),h.default({___leaf_create_element_react:["@leaf-web/core","createElementReactStyle"]}),F.default()]},output:{format:"iife",file:E.default.join("./.leaf",n)}}],d=c.watch(u);let p=null;const f=N("./.leaf");f.start(r,(async()=>{C(`started development server on http://localhost:${r}.`),await q.default(`http://127.0.0.1:${r}/`)})),f.on("error",(e=>{M(`Failed to start development server.\n${w.default.gray(e)}`)}));const g=()=>{process.stdout.moveCursor(0,-1e4),process.stdout.cursorTo(0),process.stdout.clearScreenDown()};let m=!0;d.on("event",(e=>{"START"===e.code?(m=!0,g(),C("building..."),p=null):"END"===e.code?(p?(M("an unexpected error occured while building."),f.error(p.message)):(g(),C("build successful.")),m=!1):"ERROR"===e.code?(M(`failed to build.\n${w.default.gray(e.error)}`),p=e.error):"BUNDLE_END"===e.code&&e.result.close()}));_.default.watch(".",{ignored:["node_modules","**/*.jsx","**/*.tsx"]}).on("all",(()=>{m||p||(C("change detected to filesystem. reloading..."),f.update(),g(),C("waiting for changes..."))}))};O.name("leaf").description("Leafjs helper CLI."),O.command("build").description("Build and bundle a Leafjs application.").option("-c, --config <string>","Config file location.","./leaf.config.json").action((async e=>{C("compiling..."),await P(e.config),C("compiled successfully.")})),O.command("dev").description("Start a development server.").option("-c, --config <string>","Config file location.","./leaf.config.json").option("-p, --port <number>","Port to start the development server.","8080").action((e=>{U(e.config,parseInt(e.port))})),O.command("start").description("Start a Nodejs file server for `build` folder.").option("-p, --port <number>","Port to start the server","8080").option("-d, --dir <string>","Directory to serve.","./dist").action((e=>{$.default.existsSync(e.dir)||(M(`Unable to locate directory ${e.dir}.`),process.exit(1));N(e.dir).start(parseInt(e.port),(async()=>{C(`Started server on http://localhost:${e.port}`),await q.default(`http://localhost:${e.port}`)}))})),O.parse(),exports.DEV_SERVER_ROOT="./.leaf",exports.buildFromConfig=P,exports.bundleFiles=I,exports.error=M,exports.getConfigWithDefault=J,exports.info=C,exports.startDevServer=U,exports.warn=k;
//# sourceMappingURL=parser.min.js.map
